# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  backend

Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 10
    Runtime: nodejs16.x
    Architectures:
      - x86_64
  Api:
    Cors:
      AllowMethods: "'GET'"
      AllowOrigin: "'*'"

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/common
      CompatibleRuntimes:
        - nodejs16.x


  WebEndpoint:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Models:
        UserCreation:
          type: object
          required:
            - name
            - email
          properties:
            name:
              type: string
            email:
              type: String


  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Retrieves all users
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          TABLE_USER: !Ref UserTable
      CodeUri: src/app/user
      Handler: app.getAll
      Events:
        GetUsers:
          Type: Api
          Properties:
            Path: /user
            Method: GET
            RestApiId: WebEndpoint
      Layers:
        - !Ref CommonLayer

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Retrieve a user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          TABLE_USER: !Ref UserTable
      CodeUri: src/app/user
      Handler: app.getOne
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user/{id}
            Method: GET
            RestApiId: WebEndpoint
            RequestParameters:
            - method.request.path.id:
                Required: true
      Layers:
        - !Ref CommonLayer

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Create a new user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      Environment:
        Variables:
          TABLE_USER: !Ref UserTable
      CodeUri: src/app/user
      Handler: app.postOne
      Events:
        PostUser:
          Type: Api
          Properties:
            Path: /user
            Method: POST
            RestApiId: WebEndpoint
            RequestModel:
              Model: UserCreation
              Required: true
      Layers:
        - !Ref CommonLayer


  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      TableName: User


Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${WebEndpoint}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
