# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  backend

Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 4
    Runtime: nodejs16.x
    Architectures:
      - x86_64
    MemorySize: 256
    Layers:
      - Ref: CommonLayer
  Api:
    OpenApiVersion: 3.0.0
    Cors:
      AllowMethods: "'GET'"
      AllowOrigin: "'*'"

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/common
      CompatibleRuntimes:
        - nodejs16.x


  # API
  WebEndpoint:
    Type: AWS::Serverless::Api
    Properties:
      Name: Anonymoose-Test-API
      EndpointConfiguration:
        Type: EDGE
      StageName: Test
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: api.yaml


  # IAM
  APIGatewayInvokeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ApiGateway
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - '*'


  # Lambda Functions
  # Users
  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Retrieves all users
      FunctionName: Anonymoose-Test-getUsers
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      CodeUri: src/app/user
      Handler: user.getUsers

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Retrieve a user
      FunctionName: Anonymoose-Test-getUser
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      CodeUri: src/app/user
      Handler: user.getUser

  GetUserTweetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Retrieve tweets from a user
      FunctionName: Anonymoose-Test-getUserTweets
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TweetTable
      CodeUri: src/app/user
      Handler: tweet/tweet.getUserTweets

  # Profiles
  GetProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Retrieve current profile information
      FunctionName: Anonymoose-Test-getProfile
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      CodeUri: src/app/profile
      Handler: profile.getProfile

  PostProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Create a new profile with given token id information
      FunctionName: Anonymoose-Test-postProfile
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
      CodeUri: src/app/profile
      Handler: profile.postProfile

  # Tweets
  GetTweetsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Retrieves all tweets
      FunctionName: Anonymoose-Test-getTweets
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TweetTable
      CodeUri: src/app/tweet
      Handler: tweet.getTweets

  GetTweetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Retrieve a tweet
      FunctionName: Anonymoose-Test-getTweet
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TweetTable
      CodeUri: src/app/tweet
      Handler: tweet.getTweet

  PostTweetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Create a new tweet
      FunctionName: Anonymoose-Test-postTweet
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TweetTable
      CodeUri: src/app/tweet
      Handler: tweet.postTweet

  GetTweetCommentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Retrieves all comments for a tweet
      FunctionName: Anonymoose-Test-getTweetComment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TweetTable
      CodeUri: src/app/tweet
      Handler: tweet.getTweetComments

  PostTweetCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Create a new comment for a tweet
      FunctionName: Anonymoose-Test-postTweetComment
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
        - DynamoDBCrudPolicy:
            TableName: !Ref TweetTable
      CodeUri: src/app/tweet
      Handler: tweet.postTweetComment

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: User
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: name
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: NameIndex
          KeySchema:
            - AttributeName: name
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST
  TweetTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Tweet
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: author
          AttributeType: S
        - AttributeName: parent
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AuthorIndex
          KeySchema:
            - AttributeName: author
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: ParentIndex
          KeySchema:
            - AttributeName: parent
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST


Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Test stage"
    Value: !Sub "https://${WebEndpoint}.execute-api.${AWS::Region}.amazonaws.com/Test/"
