get:
  operationId: getProfile
  summary: "Retrieve current profile information"
  description: "Retrieve current profile information based on given ID Token"
  tags: [Profile]
  x-amazon-apigateway-request-validator: params
  x-amazon-apigateway-integration:
    uri:
      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProfileFunction.Arn}/invocations
    httpMethod: "POST"
    timeoutInMillis: 4000
    credentials:
      Fn::GetAtt: APIGatewayInvokeLambdaRole.Arn
    type: "aws_proxy"
  responses:
    200:
      $ref: '../../components/responses/profile/profile.yml'
    400:
      $ref: '../../components/responses/error/invalidAuthorizer.yml'
    401:
      $ref: '../../components/responses/error/unauthorized.yml'
    404:
      $ref: '../../components/responses/error/notFound.yml'
  security:
    - amazonCognito: []
post:
  operationId: postProfile
  summary: "Create a new profile"
  description: "Create a new profile based on given ID Token"
  tags: [Profile]
  x-amazon-apigateway-request-validator: all
  x-amazon-apigateway-integration:
    uri:
      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostProfileFunction.Arn}/invocations
    httpMethod: "POST"
    timeoutInMillis: 4000
    credentials:
      Fn::GetAtt: APIGatewayInvokeLambdaRole.Arn
    type: "aws_proxy"
  responses:
    201:
      $ref: '../../components/responses/profile/profile.yml'
    401:
      $ref: '../../components/responses/error/unauthorized.yml'
    409:
      $ref: '../../components/responses/error/alreadyExist.yml'
  security:
    - amazonCognito: []

options:
  responses:
    200:
      $ref: '../../components/responses/cors.yml'
    400:
      $ref: '../../components/responses/cors.yml'
    500:
      $ref: '../../components/responses/cors.yml'
  x-amazon-apigateway-integration:
    responses:
      default:
        statusCode: '200'
        responseParameters:
          method.response.header.Access-Control-Max-Age: '''7200'''
          method.response.header.Access-Control-Allow-Methods: '''OPTIONS,HEAD,GET,POST,PUT,DELETE'''
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
    passthroughBehavior: when_no_match
    timeoutInMillis: 29000
    requestTemplates:
      application/json: '{ "statusCode": 200 }'
    type: mock
