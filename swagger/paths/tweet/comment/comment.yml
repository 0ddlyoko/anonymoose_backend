get:
  operationId: getTweetComments
  summary: "Retrieve comments for a specific tweet"
  description: "Retrieve comments for a specific tweet"
  tags: [Tweet]
  x-amazon-apigateway-request-validator: params
  x-amazon-apigateway-integration:
    uri:
      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTweetCommentsFunction.Arn}/invocations
    httpMethod: "POST"
    timeoutInMillis: 4000
    credentials:
      Fn::GetAtt: APIGatewayInvokeLambdaRole.Arn
    type: "aws_proxy"
  parameters:
    - $ref: '../../../components/parameters/query/limit.yml'
  responses:
    200:
      $ref: '../../../components/responses/tweet/comment/commentList.yml'
    401:
      $ref: '../../../components/responses/error/unauthorized.yml'
  security:
    - amazonCognito: []
post:
  operationId: postTweetComment
  summary: "Create a new comment for a tweet"
  description: "Create a new comment for a tweet"
  tags: [Tweet]
  x-amazon-apigateway-request-validator: all
  x-amazon-apigateway-integration:
    uri:
      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostTweetCommentFunction.Arn}/invocations
    httpMethod: "POST"
    timeoutInMillis: 4000
    credentials:
      Fn::GetAtt: APIGatewayInvokeLambdaRole.Arn
    type: "aws_proxy"
  requestBody:
    $ref: '../../../components/requestBodies/tweet/tweet.yml'
  responses:
    201:
      $ref: '../../../components/responses/tweet/comment/comment.yml'
    400:
      $ref: '../../../components/responses/error/invalidBody.yml'
    401:
      $ref: '../../../components/responses/error/unauthorized.yml'
  security:
    - amazonCognito: []

options:
  responses:
    200:
      $ref: '../../../components/responses/cors.yml'
    400:
      $ref: '../../../components/responses/cors.yml'
    500:
      $ref: '../../../components/responses/cors.yml'
  x-amazon-apigateway-integration:
    responses:
      default:
        statusCode: '200'
        responseParameters:
          method.response.header.Access-Control-Max-Age: '''7200'''
          method.response.header.Access-Control-Allow-Methods: '''OPTIONS,HEAD,GET,POST,PUT,DELETE'''
          method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
          method.response.header.Access-Control-Allow-Origin: '''*'''
    passthroughBehavior: when_no_match
    timeoutInMillis: 29000
    requestTemplates:
      application/json: '{ "statusCode": 200 }'
    type: mock
